# Generated by Django 3.1 on 2020-11-10 00:11

from __future__ import unicode_literals

from django.db import migrations, models
import csv
from datetime import datetime

countries = [
    {'name': 'Australia'},
    {'name' : 'Germany'}
]

states = [
    {'country' : 'Australia' , 'name' : 'Australian Capital Territory', 'statecode' : 'ACT'},
    {'country' : 'Australia' , 'name' : 'New South Wales', 'statecode' : 'NSW'},
    {'country' : 'Australia' , 'name' : 'Northern Territory', 'statecode' : 'NT'},
    {'country' : 'Australia' , 'name' : 'Queensland', 'statecode' : 'QLD'},
    {'country' : 'Australia' , 'name' : 'South Australia', 'statecode' : 'SA'},
    {'country' : 'Australia' , 'name' : 'Tasmania', 'statecode' : 'TAS'},
    {'country' : 'Australia' , 'name' : 'Victoria', 'statecode' : 'VIC'},
    {'country' : 'Australia' , 'name' : 'Western Australia', 'statecode' : 'WA'},
    {'country' : 'Germany' , 'name' : 'Bavaria', 'statecode' : 'BY'},
]

localities = [
    {'statecode' : 'WA',  'name' : 'Boya', 'postcode' : '6056'},
    {'statecode' : 'WA',  'name' : 'Bentley', 'postcode' : '6102'},
    {'statecode' : 'WA',  'name' : 'Kalgoorlie-Boulder', 'postcode' : '6430'},
    {'statecode' : 'WA',  'name' : 'Busselton-Vasse', 'postcode' : '6280'},
    {'statecode' : 'BY',  'name' : 'Munchen', 'postcode' : '80290'},
]

#########################################################################
def load_initial_data(apps, schema_editor):
    
    Country = apps.get_model("calibrationsites", "Country")
    State = apps.get_model("calibrationsites", "State")
    Locality = apps.get_model("calibrationsites", "Locality")
    
    for country in countries:
            # print(country['name'])
            obj = Country.objects.get_or_create(name = country['name'])
    
    for state in states:
            country_id = Country.objects.get(name = state['country'])
            obj = State.objects.get_or_create(
                country = country_id,
                name = state['name'],
                statecode = state['statecode']
            )

    for locality in localities:
            state_id = State.objects.get(statecode = locality['statecode'])#; print(state_id.country.name)
            obj = Locality.objects.get_or_create(
                country = Country.objects.get(name = state_id.country.name),
                state = state_id,
                name = locality['name'],
                postcode = locality['postcode']
            )

    
def reverse_func(apps, schema_editor):
    Country = apps.get_model("calibrationsites", Country)
    Country.objects.all().delete()

    State = apps.get_model("calibrationsites", "State")
    State.objects.all().delete()

    Locality = apps.get_model("calibrationsites", "Locality")
    Locality.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('calibrationsites', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_initial_data, reverse_func),
    ]

