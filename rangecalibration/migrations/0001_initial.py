# Generated by Django 4.0.6 on 2023-04-14 07:29

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import rangecalibration.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('calibrationsites', '0001_initial'),
        ('instruments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RangeCalibrationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_number', models.CharField(help_text='Enter a job number, e.g., JN20222511', max_length=10, validators=[django.core.validators.RegexValidator('^[A-Z]{2}[0-9]{8}$', 'Ten characters starting with two alphabets and ending with eight numbers are allowed.')], verbose_name='Job Number')),
                ('ave_temperature1', models.FloatField(help_text='Average temperature for the first set')),
                ('ave_temperature2', models.FloatField(help_text='Average temperature for the second set')),
                ('calibration_date', models.DateField()),
                ('calibration_report', models.FileField(blank=True, null=True, upload_to=rangecalibration.models.get_upload_to_calibreport, verbose_name='Calibration Certificate/Report')),
                ('field_file', models.FileField(help_text='Upload the ASCII file generated by the level instrument', null=True, upload_to=rangecalibration.models.get_upload_to_fieldfile, verbose_name='Field Data')),
                ('field_book', models.FileField(help_text='Upload the field book in pdf/jpg/tif format', null=True, upload_to=rangecalibration.models.get_upload_to_fieldbook, verbose_name='Field Book')),
                ('observer_isme', models.BooleanField(default=False, verbose_name='I am the Observer')),
                ('observer', models.CharField(blank=True, max_length=50, null=True)),
                ('valid', models.BooleanField(default=True, verbose_name='Calibration Valid')),
                ('updated_to', models.BooleanField(default=False, verbose_name='Updated to Range Param')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('inst_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='instruments.digitallevel', verbose_name='Level Number')),
                ('inst_staff', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='instruments.staff', verbose_name='Staff Number')),
                ('site_id', models.ForeignKey(limit_choices_to=models.Q(('site_type', 'staff_range'), ('site_type', 'staff_lab'), _connector='OR'), null=True, on_delete=django.db.models.deletion.RESTRICT, to='calibrationsites.calibrationsite', verbose_name='Site Name')),
            ],
            options={
                'ordering': ['inst_staff', 'calibration_date'],
            },
        ),
        migrations.CreateModel(
            name='RawDataModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation', models.JSONField(null=True)),
                ('calibration_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='rangecalibration.rangecalibrationrecord', verbose_name='Calibration Id')),
            ],
        ),
        migrations.CreateModel(
            name='HeightDifferenceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height_difference', models.JSONField(null=True)),
                ('calibration_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='rangecalibration.rangecalibrationrecord', verbose_name='Calibration Id')),
            ],
        ),
        migrations.CreateModel(
            name='BarCodeRangeParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_to', models.JSONField(blank=True, null=True)),
                ('Jan', models.JSONField(blank=True, null=True)),
                ('Feb', models.JSONField(blank=True, null=True)),
                ('Mar', models.JSONField(blank=True, null=True)),
                ('Apr', models.JSONField(blank=True, null=True)),
                ('May', models.JSONField(blank=True, null=True)),
                ('Jun', models.JSONField(blank=True, null=True)),
                ('Jul', models.JSONField(blank=True, null=True)),
                ('Aug', models.JSONField(blank=True, null=True)),
                ('Sep', models.JSONField(blank=True, null=True)),
                ('Oct', models.JSONField(blank=True, null=True)),
                ('Nov', models.JSONField(blank=True, null=True)),
                ('Dec', models.JSONField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('site_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='calibrationsites.calibrationsite', verbose_name='Calibration Site')),
            ],
        ),
        migrations.CreateModel(
            name='AdjustedDataModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adustment', models.JSONField(null=True)),
                ('calibration_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='rangecalibration.rangecalibrationrecord', verbose_name='Calibration Id')),
            ],
        ),
        migrations.AddConstraint(
            model_name='rangecalibrationrecord',
            constraint=models.UniqueConstraint(fields=('site_id', 'job_number', 'inst_staff', 'calibration_date'), name='unique_calibration_instance'),
        ),
    ]
