# Generated by Django 4.1.9 on 2024-10-14 01:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("calibrationsites", "0004_auto_Create_Default_Pillars"),
        ("edm_calibration", "0001_initial"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="upillarsurvey",
            name="Both site and calibrated basline fields can not be null",
        ),
        migrations.AlterField(
            model_name="upillarsurvey",
            name="auto_base_calibration",
            field=models.BooleanField(
                default=True,
                help_text="Auto select will use the most recent certified distances dated prior to this EDMI Calibration survey date",
                verbose_name="Auto select corresponding calibration of this baseline",
            ),
        ),
        migrations.AlterField(
            model_name="upillarsurvey",
            name="outlier_criterion",
            field=models.DecimalField(
                decimal_places=1,
                default=2,
                help_text="Number of standard deviations for outlier detection threashold.",
                max_digits=2,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(5),
                ],
                verbose_name="Rejection Criteria for outlier detection",
            ),
        ),
        migrations.AlterField(
            model_name="upillarsurvey",
            name="site",
            field=models.ForeignKey(
                blank=True,
                help_text="Select the baseline used for the calibration",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="calibrationsites.calibrationsite",
            ),
        ),
        migrations.AddConstraint(
            model_name="upillarsurvey",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("site__isnull", False),
                    ("calibrated_baseline__isnull", False),
                    _connector="OR",
                ),
                name="Both site and calibrated baseline fields can not be null",
            ),
        ),
    ]
