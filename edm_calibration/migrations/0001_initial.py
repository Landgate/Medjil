# Generated by Django 3.1 on 2022-08-01 07:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('instruments', '0001_initial'),
        ('baseline_calibration', '0001_initial'),
        ('calibrationsites', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='uPillar_Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_date', models.DateField()),
                ('computation_date', models.DateField()),
                ('observer', models.CharField(blank=True, max_length=25, null=True)),
                ('weather', models.CharField(choices=[('Sunny/Clear', 'Sunny/Clear'), ('Partially cloudy', 'Partially cloudy'), ('Cloudy', 'Cloudy'), ('Overcast', 'Overcast'), ('Drizzle', 'Drizzle'), ('Raining', 'Raining'), ('Stormy', 'Stormy')], help_text='Weather conditions', max_length=25)),
                ('job_number', models.CharField(help_text='Job reference eg., JN 20212216', max_length=25)),
                ('mets_applied', models.BooleanField(default=True, help_text='Meterological corrections have been applied in the EDM instrument.', verbose_name='Atmospheric corrections applied to EDM data')),
                ('thermo_calib_applied', models.BooleanField(default=True, help_text='The thermometer calibration correction has been applied prior to data import.', verbose_name='thermometer calibration corrections applied')),
                ('baro_calib_applied', models.BooleanField(default=True, help_text='The barometer calibration correction has been applied prior to data import.', verbose_name='barometer calibration corrections applied')),
                ('hygro_calib_applied', models.BooleanField(default=True, help_text='The hygrometer correction has been applied prior to data import.', verbose_name='Hygrometer calibration corrections applied')),
                ('outlier_criterion', models.DecimalField(decimal_places=1, default=2, help_text='Number of standard deviations for outlier detection threashold.', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('fieldnotes_upload', models.FileField(blank=True, null=True, upload_to='fieldnotes/', verbose_name='Scanned fieldnotes')),
                ('uploaded_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('barometer', models.ForeignKey(help_text='Barometer used for survey', limit_choices_to={'mets_specs__mets_model__inst_type': 'baro'}, on_delete=django.db.models.deletion.PROTECT, related_name='ufield_barometer', to='instruments.mets_inst')),
                ('calibrated_baseline', models.ForeignKey(help_text='Baseline certified distances', on_delete=django.db.models.deletion.PROTECT, to='baseline_calibration.pillar_survey')),
                ('edm', models.ForeignKey(help_text='EDM used for survey', on_delete=django.db.models.deletion.PROTECT, to='instruments.edm_inst')),
                ('hygrometer', models.ForeignKey(blank=True, help_text='Hygrometer, if used for survey', limit_choices_to={'mets_specs__mets_model__inst_type': 'hygro'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ufield_hygrometer', to='instruments.mets_inst')),
                ('prism', models.ForeignKey(help_text='Prism used for survey', on_delete=django.db.models.deletion.PROTECT, to='instruments.prism_inst')),
                ('thermometer', models.ForeignKey(help_text='Thermometer used for survey', limit_choices_to={'mets_specs__mets_model__inst_type': 'thermo'}, on_delete=django.db.models.deletion.PROTECT, related_name='ufield_thermometer', to='instruments.mets_inst')),
                ('uncertainty_budget', models.ForeignKey(help_text='Preset uncertainty budget', on_delete=django.db.models.deletion.PROTECT, to='baseline_calibration.uncertainty_budget')),
            ],
            options={
                'ordering': ['edm', 'survey_date'],
            },
        ),
        migrations.CreateModel(
            name='uEDM_Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inst_ht', models.DecimalField(decimal_places=3, max_digits=4, verbose_name='Instrument height')),
                ('tgt_ht', models.DecimalField(decimal_places=3, max_digits=4, verbose_name='Target height')),
                ('slope_dist', models.DecimalField(decimal_places=5, max_digits=9, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='slope distance')),
                ('temperature', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50.0)])),
                ('pressure', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1500.0)])),
                ('humidity', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100.0)])),
                ('from_pillar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calibrationsites.pillar')),
                ('pillar_survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edm_calibration.upillar_survey')),
                ('to_pillar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='calibrationsites.pillar')),
            ],
            options={
                'ordering': ['pillar_survey', 'from_pillar', 'to_pillar'],
            },
        ),
        migrations.CreateModel(
            name='StepBySteGuideModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headline', models.CharField(max_length=200, verbose_name='Title')),
                ('guide_types', models.CharField(choices=[(None, '--- Select Type ---'), ('edmi', 'EDM Instruments'), ('edm', 'EDM Baselines'), ('staff', 'Barcode Staves'), ('range', 'Staff Calibration Range')], max_length=20, null=True, verbose_name='Type')),
                ('content', models.TextField()),
                ('img', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Article Image')),
                ('pub_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('mod_date', models.DateTimeField(auto_now=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
