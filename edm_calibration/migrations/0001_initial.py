'''

   Â© 2025 Western Australian Land Information Authority

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''
# Generated by Django 4.1.9 on 2023-08-26 14:37
import common_func.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import edm_calibration.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("instruments", "0004_auto_recommended_specifications"),
        ("calibrationsites", "0004_auto_Create_Default_Pillars"),
    ]

    operations = [
        migrations.CreateModel(
            name="uPillarSurvey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("auto_base_calibration", models.BooleanField(default=True)),
                ("survey_date", models.DateField()),
                ("computation_date", models.DateField()),
                ("observer", models.CharField(
                    validators=[common_func.validators.validate_profanity],
                    blank=True, max_length=25, null=True)),
                (
                    "weather",
                    models.CharField(
                        choices=[
                            ("Sunny/Clear", "Sunny/Clear"),
                            ("Partially cloudy", "Partially cloudy"),
                            ("Cloudy", "Cloudy"),
                            ("Overcast", "Overcast"),
                            ("Drizzle", "Drizzle"),
                            ("Raining", "Raining"),
                            ("Stormy", "Stormy"),
                        ],
                        help_text="Weather conditions",
                        max_length=25,
                    ),
                ),
                (
                    "job_number",
                    models.CharField(
                        blank=True,
                        help_text="Job reference eg., JN 20212216",
                        validators=[common_func.validators.validate_profanity],
                        max_length=25,
                        null=True,
                        verbose_name="Job Number/Reference",
                    ),
                ),
                ('comment', models.CharField(blank=True, max_length=256, null=True)),
                (
                    "mets_applied",
                    models.BooleanField(
                        default=True,
                        help_text="Meterological corrections have been applied in the EDM instrument.",
                        verbose_name="Atmospheric corrections applied to EDM data",
                    ),
                ),
                (
                    "thermo_calib_applied",
                    models.BooleanField(
                        default=True,
                        help_text="The thermometer calibration correction has been applied prior to data import.",
                        verbose_name="thermometer calibration corrections applied",
                    ),
                ),
                (
                    "baro_calib_applied",
                    models.BooleanField(
                        default=True,
                        help_text="The barometer calibration correction has been applied prior to data import.",
                        verbose_name="barometer calibration corrections applied",
                    ),
                ),
                (
                    "hygro_calib_applied",
                    models.BooleanField(
                        default=True,
                        help_text="The hygrometer correction has been applied prior to data import.",
                        verbose_name="Hygrometer calibration corrections applied",
                    ),
                ),
                (
                    "scalar",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="a-priori standard uncertainties are multiplied by the a-priori scalar",
                        max_digits=6,
                        verbose_name="a-priori scalar",
                    ),
                ),
                (
                    "outlier_criterion",
                    models.DecimalField(
                        decimal_places=1,
                        default=2,
                        help_text="Number of standard deviations for outlier detection threashold.",
                        max_digits=2,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "test_cyclic",
                    models.BooleanField(
                        default=False,
                        help_text="Test Instrument For Cyclic Errors (Nb. Instrument Parameters Require 'Unit Lenght'",
                        verbose_name="Test for cyclic errors",
                    ),
                ),
                (
                    "fieldnotes_upload",
                    models.FileField(
                        blank=True,
                        null=True,
                        max_length=1000,
                        upload_to=edm_calibration.models.get_upload_to_location,
                        validators=[common_func.validators.validate_file_size], 
                        verbose_name="Scanned fieldnotes",
                    ),
                ),
                (
                    "data_entered_person",
                    models.CharField(
                        validators=[common_func.validators.validate_profanity],
                        blank=True, max_length=25, null=True),
                ),
                (
                    "data_entered_position",
                    models.CharField(
                        validators=[common_func.validators.validate_profanity],
                        blank=True, max_length=25, null=True),
                ),
                ("data_entered_date", models.DateField(blank=True, null=True)),
                (
                    "data_checked_person",
                    models.CharField(
                        validators=[common_func.validators.validate_profanity],
                        blank=True, max_length=25, null=True),
                ),
                (
                    "data_checked_position",
                    models.CharField(
                        validators=[common_func.validators.validate_profanity],
                        blank=True, max_length=25, null=True),
                ),
                ("data_checked_date", models.DateField(blank=True, null=True)),
                ("uploaded_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "barometer",
                    models.ForeignKey(
                        help_text="Barometer used for survey",
                        limit_choices_to={"mets_specs__inst_type": "baro"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ufield_barometer",
                        to="instruments.mets_inst",
                    ),
                ),
                (
                    "calibrated_baseline",
                    models.ForeignKey(
                        help_text="Baseline certified distances",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="baseline_calibration.pillar_survey",
                    ),
                ),
                (
                    "certificate",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="instruments.edmi_certificate",
                    ),
                ),
                (
                    "edm",
                    models.ForeignKey(
                        help_text="EDM used for survey",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.edm_inst",
                        verbose_name="EDM",
                    ),
                ),
                (
                    "hygrometer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Hygrometer, if used for survey",
                        limit_choices_to={"mets_specs__inst_type": "hygro"},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ufield_hygrometer",
                        to="instruments.mets_inst",
                    ),
                ),
                (
                    "prism",
                    models.ForeignKey(
                        help_text="Prism used for survey",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.prism_inst",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        help_text="Baseline certified distances",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="calibrationsites.calibrationsite",
                    ),
                ),
                (
                    "thermometer",
                    models.ForeignKey(
                        help_text="Thermometer used for survey",
                        limit_choices_to={
                            "mets_specs__inst_type": "thermo"
                        },
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ufield_thermometer",
                        to="instruments.mets_inst",
                    ),
                ),
                (
                    "uncertainty_budget",
                    models.ForeignKey(
                        help_text="Preset uncertainty budget",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="baseline_calibration.uncertainty_budget",
                    ),
                ),
            ],
            options={
                "ordering": ["edm", "survey_date"],
                "verbose_name": "EDMI Calibration Surveys",
            },
        ),
        migrations.CreateModel(
            name="uEdmObservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "inst_ht",
                    models.DecimalField(
                        decimal_places=3, max_digits=4, verbose_name="Instrument height"
                    ),
                ),
                (
                    "tgt_ht",
                    models.DecimalField(
                        decimal_places=3, max_digits=4, verbose_name="Target height"
                    ),
                ),
                (
                    "raw_slope_dist",
                    models.DecimalField(
                        decimal_places=5,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="slope distance",
                    ),
                ),
                (
                    "raw_temperature",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50.0),
                        ],
                    ),
                ),
                (
                    "raw_pressure",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1500.0),
                        ],
                    ),
                ),
                (
                    "raw_humidity",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "use_for_distance",
                    models.BooleanField(
                        default=True,
                        help_text="This observation (will) / (will not) be used for determining the calibration of the edmi.",
                        verbose_name="Use for surveying the certified distances",
                    ),
                ),
                (
                    "from_pillar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="calibrationsites.pillar",
                    ),
                ),
                (
                    "pillar_survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="edm_calibration.upillarsurvey",
                    ),
                ),
                (
                    "to_pillar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="calibrationsites.pillar",
                    ),
                ),
            ],
            options={
                "ordering": ["pillar_survey", "from_pillar", "to_pillar"],
            },
        ),
        migrations.AddConstraint(
            model_name="upillarsurvey",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("site__isnull", False),
                    ("calibrated_baseline__isnull", False),
                    _connector="OR",
                ),
                name="Both site and calibrated basline fields can not be null",
            ),
        ),
        migrations.CreateModel(
            name="Intercomparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_date", models.DateField()),
                ("to_date", models.DateField()),
                (
                    "job_number",
                    models.CharField(
                    blank=True,
                    help_text="Job reference eg., JN 20212216",
                    max_length=25,
                    null=True,
                    validators=[common_func.validators.validate_profanity],
                    verbose_name="Job Number/Reference",
                    ),
                ),
                (
                    "sample_distances",
                    models.CharField(
                    blank=False,
                    default="20, 300, 600",
                    help_text="Comma seperated list of distances",
                    max_length=255,
                    validators=[common_func.validators.validate_csv_text],
                    null=False,
                    verbose_name="Sample Distances (m)",
                    ),
                ),
                ('html_report', models.TextField(blank=True, null=True)),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "edm",
                    models.ForeignKey(
                        help_text="EDM used for interlaboratory comparison",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="instruments.edm_inst",
                        verbose_name="EDM",
                    ),
                ),
                (
                    "prism",
                    models.ForeignKey(
                        help_text="Prism used for interlaboratory comparison",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="instruments.prism_inst",
                        verbose_name="Prism",
                    ),
                ),
            ],
            options={
                "verbose_name": "Interlaboratory comparison",
                "ordering": ["edm"],
            },
        ),
        migrations.AddConstraint(
            model_name="intercomparison",
            constraint=models.CheckConstraint(
                check=models.Q(("to_date__gt", models.F("from_date"))),
                name="The from date must be before the to date",
            ),
        ),
        
    ]
