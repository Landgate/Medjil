'''

   © 2024 Western Australian Land Information Authority

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''
# Generated by Django 4.1.9 on 2023-08-26 13:53
import common_func.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import instruments.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0004_load_report_notes"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EDM_Inst",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "edm_number",
                    models.CharField(
                        help_text="Enter the instrument serial number / unique ID",
                        max_length=15,
                        validators=[common_func.validators.validate_profanity],
                        verbose_name="EDM Number",
                    ),
                ),
                (
                    "photo",
                    models.FileField(
                        blank=True,
                        null=True,
                        validators=[common_func.validators.validate_file_size],
                        upload_to=instruments.models.get_upload_to_edm_photos,
                        verbose_name="Instrument Photo",
                    ),
                ),
                ("comment", models.CharField(
                    blank=True,
                    max_length=256,
                    null=True,
                    validators=[common_func.validators.validate_profanity])),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "edm_custodian",
                    models.ForeignKey(
                        blank=True,
                        help_text="Name of instrument custodian",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="EDM Custodian",
                    ),
                ),
            ],
            options={
                "ordering": ["edm_specs"],
                "verbose_name": "EDM Instruments",
            },
        ),
        migrations.CreateModel(
            name="InstrumentMake",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "make",
                    models.CharField(
                        help_text="e.g., LEICA, TRIMBLE, SOKKIA",
                        max_length=25,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(4),
                                    common_func.validators.validate_profanity],
                    ),
                ),
                (
                    "make_abbrev",
                    models.CharField(
                        help_text="Specify a 3 to 4 letter abbreviation",
                        max_length=4,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(3), 
                                    common_func.validators.validate_profanity],
                        verbose_name="Abbreviation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InstrumentModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "inst_type",
                    models.CharField(
                        choices=[
                            (None, "Select one of the following"),
                            ("edm", "Total Station EDM"),
                            ("prism", "Prism"),
                            ("level", "Digital Level"),
                            ("staff", "Barcoded Staff"),
                            ("baro", "Barometer"),
                            ("thermo", "Thermometer"),
                            ("hygro", "Hygrometer"),
                            ("psy", "Psychrometer"),
                            ("others", "Others"),
                        ],
                        max_length=6,
                        null=True,
                        verbose_name="instrument type",
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        help_text="e.g., LS15, DNA03, TS30, S9, SX12, GT-1200/600",
                        max_length=25,
                        validators=[django.core.validators.MinLengthValidator(2),
                                    common_func.validators.validate_profanity],
                    ),
                ),
                (
                    "make",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="instruments.instrumentmake",
                    ),
                ),
            ],
            options={
                "ordering": ["inst_type", "make", "model"],
                "unique_together": {("inst_type", "make", "model")},
            },
        ),
        migrations.CreateModel(
            name="Specifications_Recommendations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source_ref",
                    models.CharField(max_length=265, verbose_name="Source reference"),
                ),
                (
                    "manufacturer",
                    models.CharField(max_length=25, verbose_name="Manufacturer"),
                ),
                ("model", models.CharField(max_length=256, verbose_name="Model")),
                (
                    "edm_type",
                    models.CharField(
                        blank=True,
                        choices=[("ph", "Phase"), ("pu", "Pulse")],
                        default="ph",
                        help_text="Instrument measurement type",
                        max_length=2,
                        null=True,
                        verbose_name="EDM type",
                    ),
                ),
                (
                    "manu_unc_const",
                    models.FloatField(
                        blank=True,
                        help_text="Accuracy = A mm ± B ppm, Uncertainty Constant = A",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Manufacturers uncertainty constant",
                    ),
                ),
                (
                    "units_manu_unc_const",
                    models.CharField(
                        blank=True,
                        choices=[("µm", "µm"), ("nm", "nm"), ("mm", "mm"), ("m", "m")],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "manu_unc_ppm",
                    models.FloatField(
                        blank=True,
                        help_text="Accuracy = A mm ± B ppm, Uncertainty ppm = B",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Manufacturers ppm uncertainty",
                    ),
                ),
                (
                    "units_manu_unc_ppm",
                    models.CharField(
                        blank=True,
                        choices=[("A.x", "A.x"), ("a.x", "a.x"), ("ppm", "ppm")],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "manu_unc_k",
                    models.FloatField(
                        blank=True,
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Manufacturers uncertainty coverage factor",
                    ),
                ),
                (
                    "unit_length",
                    models.FloatField(
                        blank=True,
                        help_text="Unit Length (m)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10000.0),
                        ],
                        verbose_name="Unit Length",
                    ),
                ),
                (
                    "units_unit_length",
                    models.CharField(
                        blank=True,
                        choices=[("µm", "µm"), ("nm", "nm"), ("mm", "mm"), ("m", "m")],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "frequency",
                    models.FloatField(
                        blank=True,
                        help_text="Frequency (Hz)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100000000),
                        ],
                        verbose_name="Frequency",
                    ),
                ),
                (
                    "units_frequency",
                    models.CharField(
                        blank=True,
                        choices=[("Hz", "Hz"), ("MHz", "MHz")],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "carrier_wavelength",
                    models.FloatField(
                        blank=True,
                        help_text="Carrier Wavelength (nm)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="Carrier wavelength",
                    ),
                ),
                (
                    "units_carrier_wavelength",
                    models.CharField(
                        blank=True,
                        choices=[("µm", "µm"), ("nm", "nm"), ("mm", "mm"), ("m", "m")],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "manu_ref_refrac_index",
                    models.FloatField(
                        blank=True,
                        help_text="Manufacturers reference refractive index",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                        verbose_name="Manufacturers reference refractive index",
                    ),
                ),
                (
                    "c_term",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Coefficients C for first velocity correction eg 281.8",
                        max_digits=6,
                        null=True,
                        verbose_name="C term",
                    ),
                ),
                (
                    "d_term",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Coefficients D for first velocity correction eg 79.39",
                        max_digits=5,
                        null=True,
                        verbose_name="D term",
                    ),
                ),
                (
                    "remark",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Remark"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Prism_Specification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "manu_unc_const",
                    models.FloatField(
                        help_text="Manufacturers centring accuracy = ±1mm",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="manufacturers uncertainty constant",
                    ),
                ),
                (
                    "manu_unc_k",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="manufacturers uncertainty coverage factor",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "prism_model",
                    models.ForeignKey(
                        limit_choices_to={"inst_type__exact": "prism"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.instrumentmodel",
                    ),
                ),
                (
                    "prism_owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.company",
                        verbose_name="Prism Owner",
                    ),
                ),
            ],
            options={
                "ordering": ["prism_model"],
                "unique_together": {("prism_model", "prism_owner")},
                	"verbose_name": "Prism Models/Specifications",
            },
        ),
        migrations.CreateModel(
            name="Prism_Inst",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prism_number",
                    models.CharField(
                        help_text="Enter the instrument serial number / unique ID",
                        max_length=15,
                        validators=[common_func.validators.validate_profanity],
                        verbose_name="Prism Number",
                    ),
                ),
                (
                    "photo",
                    models.FileField(
                        blank=True,
                        null=True,
                        validators=[common_func.validators.validate_file_size],
                        upload_to=instruments.models.get_upload_to_prism_photos,
                        verbose_name="Instrument Photo",
                    ),
                ),
                ("comment", models.CharField(                        
                    blank=True,
                    max_length=265,
                    null=True,
                    validators=[common_func.validators.validate_profanity])),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "prism_custodian",
                    models.ForeignKey(
                        blank=True,
                        help_text="Name of instrument custodian",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Prism Custodian",
                    ),
                ),
                (
                    "prism_specs",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.prism_specification",
                        verbose_name="Prism Specification",
                    ),
                ),
            ],
            options={
                "ordering": ["prism_specs"],
                "unique_together": {("prism_specs", "prism_number")},
                "verbose_name": "Prism Instruments"
            },
        ),
        migrations.CreateModel(
            name="Mets_Specification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "manu_unc_const",
                    models.FloatField(
                        help_text="Manufacturers stated accuracy = ±1°C, Uncertainty Constant = 1",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="manufacturers uncertainty constant",
                    ),
                ),
                (
                    "manu_unc_k",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="manufacturers uncertainty coverage factor",
                    ),
                ),
                (
                    "measurement_increments",
                    models.DecimalField(
                        decimal_places=6,
                        validators=[
                            django.core.validators.MinValueValidator(0.000000001)],
                        help_text="Resolution of the measurement eg. 0.0001",
                        max_digits=7,
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "mets_model",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            ("inst_type__exact", "baro"),
                            ("inst_type__exact", "thermo"),
                            ("inst_type__exact", "hygro"),
                            ("inst_type__exact", "psy"),
                            _connector="OR",
                        ),
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.instrumentmodel",
                    ),
                ),
                (
                    "mets_owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="accounts.company",
                    ),
                ),
            ],
            options={
                "ordering": ["mets_model"],
                "unique_together": {("mets_model", "mets_owner")},
                "verbose_name": "Meteorological Instrument Models",
            },
        ),
        migrations.CreateModel(
            name="Mets_Inst",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mets_number",
                    models.CharField(
                        help_text="Enter the instrument serial number / unique ID",
                        max_length=15,
                        validators=[common_func.validators.validate_profanity],
                        verbose_name="instrument number",
                    ),
                ),
                ("comment", models.CharField(
                    blank=True,
                    max_length=265,
                    null=True,
                    validators=[common_func.validators.validate_profanity])),
                (
                    "photo",
                    models.FileField(
                        blank=True,
                        null=True,
                        validators=[common_func.validators.validate_file_size],
                        upload_to=instruments.models.get_upload_to_mets_photos,
                        verbose_name="Instrument photo",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "mets_custodian",
                    models.ForeignKey(
                        blank=True,
                        help_text="Name of instrument custodian",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="instrument custodian",
                    ),
                ),
                (
                    "mets_specs",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.mets_specification",
                        verbose_name="instrument specifications",
                    ),
                ),
            ],
            options={
                "ordering": ["mets_specs"],
                "unique_together": {("mets_specs", "mets_number")},
                "verbose_name": "Meteorological Instruments",
            },
        ),
        migrations.CreateModel(
            name="Mets_certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("calibration_date", models.DateField(blank=False, null=False)),
                (
                    "zero_point_correction",
                    models.FloatField(
                        help_text="eg. Correction to readings = Reading + 0.12°C, Zero point correction = 0.12",
                        validators=[
                            django.core.validators.MinValueValidator(-10.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "zpc_uncertainty",
                    models.FloatField(
                        help_text="Uncertainty of the zero point correction (m) at 95% Confidence Level",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="zero point correction uncertainty",
                    ),
                ),
                (
                    "zpc_coverage_factor",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="zero point correction coverage factor",
                    ),
                ),
                (
                    "zpc_std_dev",
                    models.FloatField(
                        blank=True,
                        help_text="Standard deviation of the zero point correction",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Zero point correction standard deviation",
                    ),
                ),
                (
                    "degrees_of_freedom",
                    models.IntegerField(
                        default=30,
                        help_text="Degrees of freedom of calibration For a Type B estimate use the following as a guide:  3 for not very confident, 10 for moderate confidence, 30 for very confident.",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(500),
                        ],
                    ),
                ),
                (
                    "certificate_upload",
                    models.FileField(
                        blank=True,
                        null=True,
                        validators=[common_func.validators.validate_file_size],
                        upload_to=instruments.models.get_upload_to_mets_certificate,
                        verbose_name="Calibration Record",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.mets_inst",
                    ),
                ),
            ],
            options={
                "ordering": ["instrument", "calibration_date"],
                "verbose_name": "Meteorological Calibration Certificates",
            },
        ),
        migrations.CreateModel(
            name="EDMI_certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("calibration_date", models.DateField(
                    blank=False, null=False, verbose_name="Calibration Date")),
                (
                    "scale_correction_factor",
                    models.FloatField(
                        help_text=(
                            "eg. &#010" +
                            "Corrected Reading = scf.d + zpc, Scale Correction Factor = scf (A.x) &#010" +
                            "Instrument Correction  = scf.d + zpc, Scale Correction Factor = scf (a.x) &#010" +
                            "Instrument Correction  = scf.d.1e-6 + zpc, Scale Correction Factor = scf (ppm)"),
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                        verbose_name="Scale Correction Factor (scf)",
                    ),
                ),
                (
                    "scf_uncertainty",
                    models.FloatField(
                        help_text="Uncertainty of the scale correction factor at 95% Confidence Level",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="scale correction factor uncertainty",
                    ),
                ),
                (
                    "scf_coverage_factor",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="scale correction factor coverage factor",
                    ),
                ),
                (
                    "scf_std_dev",
                    models.FloatField(
                        blank=True,
                        help_text="Standard deviation of the scale correction factor",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="scale correction factor standard deviation",
                    ),
                ),
                (
                    "zero_point_correction",
                    models.FloatField(
                        help_text="eg. Instrument Correction (m) = scf.d + zpc, Zero Point Correction = zpc",
                        validators=[
                            django.core.validators.MinValueValidator(-5.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Zero Point Correction (zpc)",
                    ),
                ),
                (
                    "zpc_uncertainty",
                    models.FloatField(
                        help_text="Uncertainty of the zero point correction (m) at 95% Confidence Level",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="zero point correction uncertainty",
                    ),
                ),
                (
                    "zpc_coverage_factor",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="zero point correction coverage factor",
                    ),
                ),
                (
                    "zpc_std_dev",
                    models.FloatField(
                        blank=True,
                        help_text="Standard deviation of the zero point correction",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Zero point correction standard deviation",
                    ),
                ),
                (
                    "has_cyclic_corrections",
                    models.BooleanField(
                        default=False,
                            verbose_name= 'Enter Cyclic Error Parameter',
                        help_text="Click to toggle the input of cyclic error correction parameters",
                    ),
                ),
                (
                    "cyclic_one",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="The first order cyclic error parameter associated with the SIN() function",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-5.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 1",
                    ),
                ),
                (
                    "cyc_1_uncertainty",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Uncertainty of the cyclic error parameter 1 at 95% Confidence Level",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 1 uncertainty",
                    ),
                ),
                (
                    "cyc_1_coverage_factor",
                    models.FloatField(
                        blank=True,
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 1 coverage factor",
                    ),
                ),
                (
                    "cyc_1_std_dev",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Standard deviation of the Cyclic error parameter 1",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Cyclic error parameter 1 standard deviation",
                    ),
                ),
                (
                    "cyclic_two",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="The first order cyclic error parameter associated with the COS() function",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-5.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 2",
                    ),
                ),
                (
                    "cyc_2_uncertainty",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Uncertainty of the cyclic error parameter 2 at 95% Confidence Level",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 2 uncertainty",
                    ),
                ),
                (
                    "cyc_2_coverage_factor",
                    models.FloatField(
                        blank=True,
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 2 coverage factor",
                    ),
                ),
                (
                    "cyc_2_std_dev",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Standard deviation of the Cyclic error parameter 1",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Cyclic error parameter 2 standard deviation",
                    ),
                ),
                (
                    "cyclic_three",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="The second order cyclic error parameter associated with the SIN() function",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-5.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 3",
                    ),
                ),
                (
                    "cyc_3_uncertainty",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Uncertainty of the cyclic error parameter 3 at 95% Confidence Level",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 3 uncertainty",
                    ),
                ),
                (
                    "cyc_3_coverage_factor",
                    models.FloatField(
                        blank=True,
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 3 coverage factor",
                    ),
                ),
                (
                    "cyc_3_std_dev",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Standard deviation of the Cyclic error parameter 1",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Cyclic error parameter 3 standard deviation",
                    ),
                ),
                (
                    "cyclic_four",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="The second order cyclic error parameter associated with the COS() function",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-5.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 4",
                    ),
                ),
                (
                    "cyc_4_uncertainty",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Uncertainty of the cyclic error parameter 4 at 95% Confidence Level",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 4 uncertainty",
                    ),
                ),
                (
                    "cyc_4_coverage_factor",
                    models.FloatField(
                        blank=True,
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Cyclic error parameter 4 coverage factor",
                    ),
                ),
                (
                    "cyc_4_std_dev",
                    models.FloatField(
                        blank=True,
                        default=0,
                        help_text="Standard deviation of the Cyclic error parameter 1",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Cyclic error parameter 4 standard deviation",
                    ),
                ),
                (
                    "standard_deviation",
                    models.FloatField(
                        help_text="Results of measurement standard deviation (m)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="Standard Deviation",
                    ),
                ),
                (
                    "degrees_of_freedom",
                    models.IntegerField(
                        help_text="Degrees of freedom of calibration",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Degrees of Freedom",
                    ),
                ),
                (
                    "certificate_upload",
                    models.FileField(
                        blank=True,
                        null=True,
                        validators=[common_func.validators.validate_file_size],
                        upload_to=instruments.models.get_upload_to_edmi_certificate,
                        verbose_name="Calibration Record",
                    ),
                ),
                (
                    "html_report",
                    models.TextField(
                        blank=True,
                        null=True,
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "edm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.edm_inst",
                        verbose_name="EDM",
                    ),
                ),
                (
                    "prism",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.prism_inst",
                    ),
                ),
            ],
            options={
                "ordering": ["edm", "calibration_date"],
                "verbose_name": "EDMI Calibration Certificates",
            },
        ),
        migrations.CreateModel(
            name="EDM_Specification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "edm_type",
                    models.CharField(
                        choices=[("ph", "Phase"), ("pu", "Pulse")],
                        default="ph",
                        help_text="Instrument measurement type",
                        max_length=2,
                        verbose_name="EDM type",
                    ),
                ),
                (
                    "manu_unc_const",
                    models.FloatField(
                        help_text="Accuracy = A mm ± B ppm, Uncertainty Constant = A",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="manufacturers uncertainty constant",
                    ),
                ),
                (
                    "manu_unc_ppm",
                    models.FloatField(
                        help_text="Accuracy = A mm ± B ppm, Uncertainty ppm = B",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                        verbose_name="manufacturers parts per million uncertainty",
                    ),
                ),
                (
                    "manu_unc_k",
                    models.FloatField(
                        default=2.0,
                        help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="manufacturers uncertainty coverage factor",
                    ),
                ),
                (
                    "unit_length",
                    models.FloatField(
                        help_text="Unit Length (m)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10000.0),
                        ],
                    ),
                ),
                (
                    "frequency",
                    models.FloatField(
                        blank=True,
                        help_text="Frequency (Hz)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100000000),
                        ],
                    ),
                ),
                (
                    "carrier_wavelength",
                    models.FloatField(
                        blank=True,
                        help_text="Carrier Wavelength (nm)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "manu_ref_refrac_index",
                    models.FloatField(
                        blank=True,
                        help_text="Manufacturers reference refractive index",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                        verbose_name="Manufacturers reference refractive index",
                    ),
                ),
                (
                    "c_term",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Coefficients C for first velocity correction eg 281.8",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "d_term",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Coefficients D for first velocity correction eg 79.39",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "measurement_increments",
                    models.DecimalField(
                        decimal_places=6,
                        validators=[
                            django.core.validators.MinValueValidator(0.000000001)],
                        help_text="Resolution of the measurement eg. 0.01",
                        max_digits=7,
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "edm_model",
                    models.ForeignKey(
                        limit_choices_to={"inst_type__exact": "edm"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to="instruments.instrumentmodel",
                        verbose_name="EDM model",
                    ),
                ),
                (
                    "edm_owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="accounts.company",
                        verbose_name="EDM owner",
                    ),
                ),
            ],
            options={
                "ordering": ["edm_model"],
                "unique_together": {("edm_model", "edm_owner")},
                "verbose_name": "EDM Models/Specifications"
            },
        ),
        migrations.AddField(
            model_name="edm_inst",
            name="edm_specs",
            field=models.ForeignKey(
                null=False, blank=False,
                on_delete=django.db.models.deletion.PROTECT,
                to="instruments.edm_specification",
                verbose_name="EDM Specification",
            ),
        ),
        migrations.CreateModel(
            name="Staff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "staff_number",
                    models.CharField(
                        help_text="Enter the instrument number", 
                        max_length=15,
                        validators=[common_func.validators.validate_profanity]
                    ),
                ),
                (
                    "staff_type",
                    models.CharField(
                        choices=[
                            (None, "Select one of the following"),
                            ("invar", "Invar"),
                            ("fiberglass", "Fiber glass"),
                            ("wood", "Wood"),
                            ("aluminium", "Aluminium"),
                            ("steel", "Steel"),
                            ("epoxy", "Carbon/epoxy"),
                            ("e_glass", "E-glass"),
                            ("s2_glass", "S2-glass"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "staff_length",
                    models.FloatField(
                        help_text="Staff length in meters",
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="Staff length (in metres)",
                    ),
                ),
                (
                    "thermal_coefficient",
                    models.FloatField(
                        help_text="Coefficient of expansion in ppm units- e.g., Fibreglass: 10.0, Carbon: 3.0",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-100),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="CoE (in ppm)",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "staff_model",
                    models.ForeignKey(
                        limit_choices_to={"inst_type__exact": "staff"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="instruments.instrumentmodel",
                    ),
                ),
                (
                    "staff_owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.company",
                    ),
                ),
            ],
            options={
                "ordering": ["staff_number"],
                "unique_together": {("staff_number", "staff_owner")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="edm_inst",
            unique_together={("edm_specs", "edm_number")},
        ),
        migrations.CreateModel(
            name="DigitalLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level_number",
                    models.CharField(
                        help_text="Enter the instrument number",
                        max_length=15,
                        validators=[django.core.validators.MinLengthValidator(4),
                                    common_func.validators.validate_profanity],
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True, null=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "level_model",
                    models.ForeignKey(
                        limit_choices_to={"inst_type__exact": "level"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="instruments.instrumentmodel",
                    ),
                ),
                (
                    "level_owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.company",
                    ),
                ),
            ],
            options={
                "ordering": ["level_number", "level_model"],
                "unique_together": {("level_number", "level_owner")},
            },
        ),
    ]
