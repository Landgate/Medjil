'''

   Â© 2023 Western Australian Land Information Authority

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''
# Generated by Django 3.1 on 2020-11-12 02:23
import csv
from django.db import migrations, models
from datetime import datetime
from django.conf import settings
import os

# Start migration
inst_makes = [
    {'name': 'LEICA', 'make_abbrev': 'LEI'},
    {'name': 'TRIMBLE', 'make_abbrev': 'TRIM'},
    {'name': 'SOKKIA', 'make_abbrev': 'SOK'},
    {'name': 'NIKON', 'make_abbrev': 'NIK'},
    {'name': 'PENTAX', 'make_abbrev': 'PEN'},
    {'name': 'WILD', 'make_abbrev': 'WILD'},
    {'name': 'ZEISS', 'make_abbrev': 'ZEI'},
    {'name': 'GEOMAX', 'make_abbrev': 'GEO'},
    {'name': 'TOPCON', 'make_abbrev': 'TOP'},
    {'name': 'DRUCK', 'make_abbrev': 'DRUC'},
    {'name': 'DELTA OHM', 'make_abbrev': 'DLTA'},
    {'name': 'KESTREL', 'make_abbrev': 'KEST'},
    {'name': 'OTHERS', 'make_abbrev': 'OTH'},
]

def add_default_instruments(apps, schema_editor):
    InstrumentMake = apps.get_model("instruments", "InstrumentMake")    
    InstrumentModel = apps.get_model("instruments", "InstrumentModel")

    for inst_make in inst_makes:
        obj, created = InstrumentMake.objects.get_or_create(
            make = inst_make['name'],
            make_abbrev = inst_make['make_abbrev'],
        )
        obj.save()

    # try:
    with open(os.path.join(settings.STATIC_ROOT, 'data/InitialData/Default Instruments/Default Instrument Models.csv'), 'r', encoding='cp1252') as f:
        reader = csv.reader(f)
        header = next(reader)
        k = 0
        for row in reader:
                k +=1
                inst_type = row[0].strip()
                make = row[1].strip().upper()
                model = row[2].strip()
                inst_make = InstrumentMake.objects.get(make__exact=make)
                model_obj, created = InstrumentModel.objects.get_or_create(
                        inst_type = inst_type, 
                        make = inst_make,
                        model = model,
                        )

def reverse_func(apps, schema_editor):
    InstrumentMake = apps.get_model("instruments", "InstrumentMake")    
    InstrumentModel = apps.get_model("instruments", "InstrumentModel")
    
    InstrumentMake.objects.all().delete()
    InstrumentModel.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('instruments', '0001_initial'),
    ]

    operations = [
            migrations.RunPython(add_default_instruments, reverse_func),
    ]
