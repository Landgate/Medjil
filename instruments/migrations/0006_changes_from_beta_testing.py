# Generated by Django 4.1.9 on 2024-10-14 01:29

import common_func.validators
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            "instruments",
            "0005_alter_staff_iscalibrated_alter_staff_isreference_and_more",
        ),
    ]

    operations = [
        migrations.AlterField(
            model_name="edmi_certificate",
            name="standard_deviation",
            field=models.FloatField(
                help_text="Experimental Standard Deviation of single observation (m) ISO 17123-4:2012 eq.14",
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(10.0),
                ],
                verbose_name="Experimental Standard Deviation",
            ),
        ),
        migrations.AlterField(
            model_name="edmi_certificate",
            name="scale_correction_factor",
            field=models.FloatField(
                help_text="Note: scf as (A.x) = 1 + scf as (a.x) &#010Corrected Distance = scf.d + zpc, where scf is expressed as (A.x) &#010Instrument Correction  = scf.d + zpc, where scf is expressed as (a.x) &#010Instrument Correction  = scf.d.1e-6 + zpc, where scf is expressed as scf (ppm)",
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(2.0),
                ],
                verbose_name="Scale Correction Factor (scf)",
            ),
        ),
        migrations.AlterModelOptions(
            name="edm_inst",
            options={
                "ordering": [
                    "edm_specs__edm_make_name",
                    "edm_specs__edm_model_name",
                    "edm_number",
                ],
                "verbose_name": "EDM Instrument",
            },
        ),
        migrations.AlterModelOptions(
            name="mets_inst",
            options={
                "ordering": [
                    "mets_specs__mets_make_name",
                    "mets_specs__mets_model_name",
                    "mets_number",
                ],
                "verbose_name": "Meteorological Instrument",
            },
        ),
        migrations.AlterModelOptions(
            name="prism_inst",
            options={
                "ordering": [
                    "prism_specs__prism_make_name",
                    "prism_specs__prism_model_name",
                    "prism_number",
                ],
                "verbose_name": "Prism Instrument",
            },
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="c_term",
            field=models.FloatField(
                blank=True,
                help_text="Coefficients C for first velocity correction eg 281.8",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(200),
                    django.core.validators.MaxValueValidator(500),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="carrier_wavelength",
            field=models.FloatField(
                blank=True,
                help_text="Carrier Wavelength (nm)",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(10000),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="d_term",
            field=models.FloatField(
                blank=True,
                help_text="Coefficients D for first velocity correction eg 79.39",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(50),
                    django.core.validators.MaxValueValidator(200),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="edm_model_name",
            field=models.CharField(
                max_length=256,
                validators=[common_func.validators.validate_profanity],
                help_text="Type name or select from suggestions",
                verbose_name="EDM Model Name",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="edm_make_name",
            field=models.CharField(
                max_length=25,
                validators=[common_func.validators.validate_profanity],
                help_text="Type name or select from suggestions",
                verbose_name="EDM Make Name",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="edm_owner",
            field=models.ForeignKey(
                help_text="These parameters will be available to all user profiles associated with this company.",
                on_delete=django.db.models.deletion.PROTECT,
                to="accounts.company",
                verbose_name="EDM Owner",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="frequency",
            field=models.FloatField(blank=True, help_text="Frequency (Hz)", null=True),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="manu_unc_const",
            field=models.FloatField(
                blank=True,
                help_text="Uncertainty = A mm ± B ppm at 95% confidence level.&#010Uncertainty Constant = A &#010WARNING: Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010These 68% confidence level values must be multiplied by the coverage factor to be at 95% confidence level.",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
                verbose_name="manufacturers uncertainty constant",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="manu_unc_k",
            field=models.FloatField(
                blank=True,
                default=2.0,
                help_text="Coverage factor at 95% Confidence Level eg. 2.0 &#010WARNING: Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010if the coverage factor is not specified it can generally be assumed to be k=2.0",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1.0),
                    django.core.validators.MaxValueValidator(5.0),
                ],
                verbose_name="manufacturers uncertainty coverage factor",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="manu_unc_ppm",
            field=models.FloatField(
                blank=True,
                help_text="Uncertainty = A mm ± B ppm at 95% confidence level.&#010Uncertainty ppm = B &#010WARNING: Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010These 68% confidence level values must be multiplied by the coverage factor to be at 95% confidence level.",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
                verbose_name="manufacturers parts per million uncertainty",
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="unit_length",
            field=models.FloatField(
                blank=True,
                help_text="Unit Length (m)",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="edm_specification",
            name="measurement_increments",
            field=models.DecimalField(
                decimal_places=6,
                default=0.0001,
                help_text="Resolution of the measurement, how many decimal places are recorded eg. 0.01",
                max_digits=9,
                validators=[django.core.validators.MinValueValidator(1e-09)],
            ),
        ),
        migrations.AlterField(
            model_name="prism_specification",
            name="manu_unc_const",
            field=models.FloatField(
                blank=True,
                help_text="Manufacturers centring accuracy = ±1mm",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(10.0),
                ],
                verbose_name="manufacturers uncertainty constant",
            ),
        ),
        migrations.AlterField(
            model_name="prism_specification",
            name="manu_unc_k",
            field=models.FloatField(
                blank=True,
                default=2.0,
                help_text="Coverage factor at 95% Confidence Level eg. 2.0",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1.0),
                    django.core.validators.MaxValueValidator(5.0),
                ],
                verbose_name="manufacturers uncertainty coverage factor",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="c_term",
            field=models.FloatField(
                blank=True,
                help_text="Coefficients C for first velocity correction eg 281.8",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(200),
                    django.core.validators.MaxValueValidator(500),
                ],
                verbose_name="C term",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="carrier_wavelength",
            field=models.FloatField(
                blank=True,
                help_text="Carrier Wavelength (nm)",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(10000),
                ],
                verbose_name="Carrier wavelength",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="d_term",
            field=models.FloatField(
                blank=True,
                help_text="Coefficients D for first velocity correction eg 79.39",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(50),
                    django.core.validators.MaxValueValidator(200),
                ],
                verbose_name="D term",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="frequency",
            field=models.FloatField(
                blank=True,
                help_text="Frequency (Hz)",
                null=True,
                verbose_name="Frequency",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="manu_unc_const",
            field=models.FloatField(
                blank=True,
                help_text="Uncertainty = A mm ± B ppm at 95% confidence level.&#010Uncertainty Constant = A &#010Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010These 68% confidence level values must be multiplied by the coverage factor to be at 95% confidence level.",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
                verbose_name="Manufacturers uncertainty constant",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="manu_unc_k",
            field=models.FloatField(
                blank=True,
                default=2.0,
                help_text="Coverage factor at 95% Confidence Level eg. 2.0 &#010Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010if the coverage factor is not specified it can generally be assumed to be k=2.0",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1.0),
                    django.core.validators.MaxValueValidator(5.0),
                ],
                verbose_name="Manufacturers uncertainty coverage factor",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="manu_unc_ppm",
            field=models.FloatField(
                blank=True,
                help_text="Uncertainty = A mm ± B ppm at 95% confidence level.&#010Uncertainty ppm = B &#010Most manufacturers state the accuracy of their instruments as a standard deviation at 68% confidence level &#010These 68% confidence level values must be multiplied by the coverage factor to be at 95% confidence level.",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
                verbose_name="Manufacturers ppm uncertainty",
            ),
        ),
        migrations.AlterField(
            model_name="specifications_recommendations",
            name="unit_length",
            field=models.FloatField(
                blank=True,
                help_text="Unit Length (m)",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(50.0),
                ],
                verbose_name="Unit Length",
            ),
        ),
        migrations.AddField(
            model_name="edm_specification",
            name="atmos_corr_formula",
            field=models.TextField(
                blank=True,
                help_text="Express the formula for metres of atmospheric correction using python notation. Use the variables d, t, p, and h. &#010 where: &#010 d = distance (m)&#010 t = temperature (°C)&#010 p = pressure (hPa)&#010 h = relative humidity (%)",
                null=True,
                verbose_name="Custom atmospheric correction formula",
            ),
        ),
        migrations.AddField(
            model_name="specifications_recommendations",
            name="atmos_corr_formula",
            field=models.TextField(
                blank=True,
                help_text="Express the formula for metres of atmospheric correction using python notation. Use the variables d, t, p, and h. &#010where: &#010 d = distance (m)&#010 t = temperature (°C)&#010 p = pressure (hPa)&#010 h = relative humidity (%)",
                null=True,
                verbose_name="Custom atmospheric correction formula",
            ),
        ),
    ]
