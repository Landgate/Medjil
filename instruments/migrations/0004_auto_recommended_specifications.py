# Generated by Django 3.1 on 2020-11-12 02:23
from django.db import migrations
from django.conf import settings
import csv
import os
# Start migration

import_file = os.path.join(
    settings.MEDIA_ROOT, 'InitialData/Specification Recommendations/Edm Specification Recommendations.csv')

edms_specs = []
with open(import_file, 'r') as file:
    csv_reader = csv.reader(file)
    headers = next(csv_reader)  # Read the first row as headers
    
    for row in csv_reader:
        # Create a dictionary for each row, using the headers as keys
        row_dict = {header.lower(): value for header, value in zip(headers, row)}
        edms_specs.append(row_dict)


def safe_float(value):
    try:
        return float(value)
    except (ValueError, TypeError):
        return None


def add_landgate_instruments(apps, schema_editor):
    medjil_spec = apps.get_model('instruments', 'Specifications_Recommendations')

    # Add Total station Specifications
    for spec in edms_specs:
        record_obj, created = medjil_spec.objects.get_or_create(
            source_ref = spec['source_ref'],
            manufacturer = spec['manufacturer'],
            model = spec['model'],
            edm_type = spec['edm_type'],
            manu_unc_const = safe_float(spec['manu_unc_const']),
            units_manu_unc_const = spec['units_manu_unc_const'],
            manu_unc_ppm = safe_float(spec['manu_unc_ppm']),
            units_manu_unc_ppm = spec['units_manu_unc_ppm'],
            manu_unc_k = safe_float(spec['manu_unc_k']),
            unit_length = safe_float(spec['unit_length']),
            units_unit_length = spec['units_unit_length'],
            frequency = safe_float(spec['frequency']),
            units_frequency = spec['units_frequency'],
            carrier_wavelength = safe_float(spec['carrier_wavelength']),
            units_carrier_wavelength = spec['units_carrier_wavelength'],
            manu_ref_refrac_index = safe_float(spec['manu_ref_refrac_index']),
            c_term = safe_float(spec['c_term']),
            d_term = safe_float(spec['d_term']),
            remark = spec['remark']
            )

def reverse_func(apps, schema_editor):
    recommendations = apps.get_model(
        'instruments', 'Specifications_Recommendations')
    
    recommendations.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('instruments', '0001_initial'),
        ('instruments', '0002_auto_load_default_instruments'),
        ('instruments', '0003_auto_load_landgate_instruments')
    ]

    operations = [
            migrations.RunPython(add_landgate_instruments, reverse_func),
    ]
