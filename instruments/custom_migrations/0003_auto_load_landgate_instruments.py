'''

   Â© 2025 Western Australian Land Information Authority

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''
# Generated by Django 3.1 on 2020-11-12 02:23
import csv
from django.db import migrations
from datetime import datetime
from django.core.files import File
from django.conf import settings
import os
from instrument.models import(
    get_upload_to_edm_photos,,
    get_upload_to_prism_photos,
    get_upload_to_mets_photos,
    get_upload_to_edmi_certificate,
    get_upload_to_mets_certificate
    )

# Start migration
lg_prism_models = [
    {'manu_unc_const':0.6,
    'manu_unc_k':2,
    'prism_make_name':'LEICA',
    'prism_model_name':'GPH1P',
    'prism_owner':'Landgate'}
    ]
lg_prisms = [
    {'prism_number':100,
    'photo':'',
    'comment':'EDM Baseline Calibration Prism',
    'prism_custodian_id':'',
    'prism_model_name':'GPH1P'}
    ]
lg_edm_models = [
    {'edm_type':'ph',
    'manu_unc_const':2,
    'manu_unc_ppm':3,
    'manu_unc_k':2,
    'unit_length':1.5,
    'frequency':100,
    'carrier_wavelength':658,
    'manu_ref_refrac_index':1.000286338,
    'measurement_increments':0.0001,
    'edm_make_name':'LEICA',
    'edm_model_name':'TS 16',
    'edm_owner':'Landgate'},
    {'edm_type':'ph',
    'manu_unc_const':1.2,
    'manu_unc_ppm':2,
    'manu_unc_k':2,
    'unit_length':1.5,
    'frequency':100,
    'carrier_wavelength':658,
    'manu_ref_refrac_index':1.000286338,
    'measurement_increments':0.0001,
    'edm_make_name':'LEICA',
    'edm_model_name':'TS 30',
    'edm_owner':'Landgate'}]
lg_edms = [
    {'edm_number':364182,
    'photo':'',
    'comment':'EDM Baseline Calibration REG13 Instrument',
    'edm_custodian':'Landgate',
    'edm_model_name':'TS 30'},
    {'edm_number':3012827,
    'photo':'',
    'comment':'Intercomparison Instrument',
    'edm_custodian':'Landgate',
    'edm_model_name':'TS 16'}
    ]
lg_edmi_certs = [
    {'calibration_date':'2013-08-15',
    'scale_correction_factor':0.99999974,
    'scf_uncertainty':0.00000014,
    'scf_coverage_factor':2.1,
    'scf_std_dev':6.66666666666667E-08,
    'zero_point_correction':0.00048,
    'zpc_uncertainty':0.00017,
    'zpc_coverage_factor':2.1,
    'zpc_std_dev':0.000080952380952381,
    'standard_deviation':0.00015,
    'degrees_of_freedom':14,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/EDMIs/364182/2013_TS30_Calibration_Report.pdf'),
    'edm_number':364182,
    'prism_number':100},
    {'calibration_date':'2015-06-17',
    'scale_correction_factor':0.999999991,
    'scf_uncertainty':0.000000033,
    'scf_coverage_factor':2,
    'scf_std_dev':0.0000000165,
    'zero_point_correction':0.00065,
    'zpc_uncertainty':0.00024,
    'zpc_coverage_factor':2,
    'zpc_std_dev':0.00012,
    'standard_deviation':0.00022,
    'degrees_of_freedom':14,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/EDMIs/364182/2015_TS30_Calibration_Report.pdf'),
    'edm_number':364182,
    'prism_number':100},
    {'calibration_date':'2017-06-14',
    'scale_correction_factor':0.99999986,
    'scf_uncertainty':0.00000017,
    'scf_coverage_factor':2.1,
    'scf_std_dev':8.0952380952381E-08,
    'zero_point_correction':0.00045,
    'zpc_uncertainty':0.00021,
    'zpc_coverage_factor':2.1,
    'zpc_std_dev':0.0001,
    'standard_deviation':0.0001,
    'degrees_of_freedom':14,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/EDMIs/364182/2017_TS30_Calibration_Report.pdf'),
    'edm_number':364182,
    'prism_number':100},
    {'calibration_date':'2019-05-16',
    'scale_correction_factor':1.00000008,
    'scf_uncertainty':0.00000006,
    'scf_coverage_factor':2.1,
    'scf_std_dev':2.85714285714286E-08,
    'zero_point_correction':0.00032,
    'zpc_uncertainty':0.00034,
    'zpc_coverage_factor':2,
    'zpc_std_dev':0.00017,
    'standard_deviation':0.00032,
    'degrees_of_freedom':14,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/EDMIs/364182/2019_TS30_Calibration_Report.pdf'),
    'edm_number':364182,
    'prism_number':100},
    {'calibration_date':'2021-04-29',
    'scale_correction_factor':1.00000013,
    'scf_uncertainty':0.00000006,
    'scf_coverage_factor':2,
    'scf_std_dev':0.00000003,
    'zero_point_correction':-0.00003,
    'zpc_uncertainty':0.00016,
    'zpc_coverage_factor':2.1,
    'zpc_std_dev':7.61904761904762E-05,
    'standard_deviation':0.0003,
    'degrees_of_freedom':27,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/EDMIs/364182/2021_TS30_Calibration_Report.pdf'),
    'edm_number':364182,
    'prism_number':100}
    ]
lg_mets_models = [
    {'manu_unc_const':0.3,
    'manu_unc_k':2,
    'measurement_increments':0.01,
    'type':'baro',
    'mets_make_name':'DRUCK',
    'mets_model_name':'DPI740',
    'mets_owner':'Landgate'},
    {'manu_unc_const':0.6,
    'manu_unc_k':2,
    'measurement_increments':0.1,
    'type':'thermo',
    'mets_make_name':'DELTA OHMS',
    'mets_model_name':'HD 2301.0R - HP472ACR',
    'mets_owner':'Landgate'},
    {'manu_unc_const':3,
    'manu_unc_k':2,
    'measurement_increments':0.1,
    'type':'hygro',
    'mets_make_name':'DELTA OHMS',
    'mets_model_name':'HD 2301.0R - HP472ACR',
    'mets_owner':'Landgate'}
    ]
lg_mets_insts = [
    {'mets_number':74003848,
    'comment':'EDM Baseline Calibration Baro',
    'photo':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Photos/DRUCK_DPI_740.pdf'),
    'mets_custodian_id':'',
    'type':'baro',
    'mets_make_name':'DRUCK',
    'mets_model_name':'DPI740'},
    {'mets_number':20013647,
    'comment':'EDM Baseline Calibration Them',
    'photo':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Photos/DELTA_OHM.pdf'),
    'mets_custodian_id':'',
    'type':'thermo',
    'mets_make_name':'DELTA OHMS',
    'mets_model_name':'HD 2301.0R - HP472ACR'},
    {'mets_number':20013647,
    'comment':'EDM BaselineExternal Temperature/RH Probe',
    'photo':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Photos/DELTA_OHM.pdf'),
    'mets_custodian_id':'',
    'type':'hygro',
    'mets_make_name':'DELTA OHMS',
    'mets_model_name':'HD 2301.0R - HP472ACR'}
    ]
lg_mets_certs = [
    {'calibration_date':'2021-03-22',
    'zero_point_correction':0.04,
    'zpc_uncertainty':0.13,
    'zpc_coverage_factor':2,
    'zpc_std_dev':0.065,
    'degrees_of_freedom':30,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Certificates/2021_74003848_Barometer_Calibration.pdf'),
    'type':'baro',
    'mets_number':74003848},
    {'calibration_date':'2021-04-14',
    'zero_point_correction':0,
    'zpc_uncertainty':0.2,
    'zpc_coverage_factor':2,
    'zpc_std_dev':0.1,
    'degrees_of_freedom':30,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Certificates/2021_20013647_Temperature_and_RH.pdf'),
    'type':'thermo',
    'mets_number':20013647},
    {'calibration_date':'2021-04-14',
    'zero_point_correction':0.7,
    'zpc_uncertainty':2.3,
    'zpc_coverage_factor':2,
    'zpc_std_dev':1.15,
    'degrees_of_freedom':30,
    'certificate_upload':os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Mets Certificates/2021_20013647_Temperature_and_RH.pdf'),
    'type':'hygro',
    'mets_number':20013647},
    ]

        
#########################################################################

file_storage = FileSystemStorage(location=os.path.join(settings.STATIC_ROOT, 'static/data')) #

def add_landgate_instruments(apps, schema_editor):
    Company = apps.get_model("accounts", "Company")    
    CalibrationSite = apps.get_model('calibrationsites', 'CalibrationSite')
    DigitalLevel = apps.get_model('instruments', 'DigitalLevel')
    Staff = apps.get_model('instruments', 'Staff')
    StaffCalibrationRecord = apps.get_model('staffcalibration', 'StaffCalibrationRecord')
    medjil_edm_model = apps.get_model('instruments', 'EDM_Specification')
    medjil_edm_inst = apps.get_model('instruments', 'EDM_Inst')
    medjil_prism_model = apps.get_model('instruments', 'Prism_Specification')
    medjil_prism_inst = apps.get_model('instruments', 'Prism_Inst')
    medjil_edmi_certs = apps.get_model('instruments', 'EDMI_certificate')
    medjil_mets_model = apps.get_model('instruments', 'Mets_Specification')
    medjil_mets_inst = apps.get_model('instruments', 'Mets_Inst')
    medjil_mets_certs = apps.get_model('instruments', 'Mets_certificate')

    # Add digital levels
    with open(os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Digital Levels/digital_levels.csv'), 'r', encoding='cp1252') as f:
        reader = csv.reader(f)
        _ = next(reader)
        k = 0
        for row in reader:
                k +=1
                make = row[1].strip().upper()
                level_model = row[2].strip().upper()
                level_number = row[0].strip()
                level_owner = 'Landgate'
                level_obj, created = DigitalLevel.objects.get_or_create(
                    level_make_name = make, 
                    level_model_name = level_model, 
                    level_owner = Company.objects.get(company_name__exact=level_owner),
                    level_number = level_number,
                    )
    # Add bar-coded staves
    with open(os.path.join(settings.STATIC_ROOT, 'data/InitialData/Landgate/Staves/staves.csv'), 'r', encoding='cp1252') as f:
        reader = csv.reader(f)
        _ = next(reader)
        k = 0
        for row in reader:
                k +=1
                staff_number = row[0].strip()
                staff_model = row[1].strip().upper()
                staff_type = row[2].strip()
                staff_owner = 'Landgate'
                staff_length = row[3].strip()
                thermal_coefficient = row[4].strip()
                standard_temperature = row[5].strip()
                observed_temperature = row[6].strip() 
                scale_factor = row[7].strip()
                graduation_uncertainty = row[8].strip()
                calibration_date = row[9].strip()
                observer = row[10].strip()
                site_name = row[11].strip()
                field_book = row[12].strip()
                calibration_report = row[13].strip()
                job_number = row[14].strip()
                level_model = row[15].strip()
                staff_make = row[16].strip().upper()
                iscalibrated = row[17].strip()
                isreference = row[18].strip()

                calibration_date = datetime.strptime(calibration_date, '%d/%m/%Y').date()
                staff_obj, created = Staff.objects.get_or_create(
                        staff_make_name = staff_make, 
                        staff_model_name = staff_model, 
                        staff_type = staff_type,
                        staff_owner = Company.objects.get(company_name__exact=staff_owner),
                        staff_number = staff_number,
                        staff_length = staff_length,
                        thermal_coefficient = thermal_coefficient,
                        iscalibrated = iscalibrated,
                        isreference = isreference,
                )
                # print(level_model)
                record_obj, created = StaffCalibrationRecord.objects.get_or_create(
                    job_number = job_number,
                    inst_staff = staff_obj,
                    # inst_level = InstrumentModel.objects.get(model__exact = level_model),
                    site_id = CalibrationSite.objects.get(site_name__exact = site_name),
                    scale_factor = scale_factor,
                    grad_uncertainty = graduation_uncertainty,
                    standard_temperature = standard_temperature,
                    # observed_temperature = observed_temperature,
                    # observer = observer,
                    calibration_date = calibration_date, 
                    # field_book = File(open(field_book, 'rb'), name = field_book.split('/')[-1]),
                    calibration_report = File(open(os.path.join(settings.STATIC_ROOT, calibration_report), 'rb'), name = calibration_report.split('/')[-1]),
                )
                if level_model:
                        record_obj.inst_level = DigitalLevel.objects.get(level_model_name__exact = level_model)
                if observed_temperature:
                        record_obj.observed_temperature = observed_temperature
                if observer:
                        record_obj.observer = observer
                if field_book and (record_obj.field_book == '' or not record_obj.field_book):
                        record_obj.field_book = File(open(os.path.join(settings.STATIC_ROOT, field_book), 'rb'), name = field_book.split('/')[-1])
                record_obj.save()
    
    # Add Landgate Prism
    for lg_prism_model in lg_prism_models:
        record_obj, created = medjil_prism_model.objects.get_or_create(
            prism_make_name = lg_prism_model['prism_make_name'],
            prism_model_name = lg_prism_model['prism_model_name'],
            manu_unc_const = lg_prism_model['manu_unc_const'],
            manu_unc_k = lg_prism_model['manu_unc_k'],
            prism_owner = Company.objects.get(
                company_name__exact=lg_prism_model['prism_owner'])
            )
    for prism in lg_prisms:
        print(prism['prism_model_name'])
        record_obj, created = medjil_prism_inst.objects.get_or_create(
            prism_number = prism['prism_number'],
            photo = prism['photo'],
            comment = prism['comment'],
            prism_specs = medjil_prism_model.objects.get(
                prism_model_name__exact = prism['prism_model_name'])
            )
    # Add Landgate Total station Specifications
    for lg_edm_model in lg_edm_models:
        record_obj, created = medjil_edm_model.objects.get_or_create(
            edm_type = lg_edm_model['edm_type'],
            manu_unc_const = lg_edm_model['manu_unc_const'],
            manu_unc_ppm = lg_edm_model['manu_unc_ppm'],
            manu_unc_k = lg_edm_model['manu_unc_k'],
            unit_length = lg_edm_model['unit_length'],
            frequency = lg_edm_model['frequency'],
            carrier_wavelength = lg_edm_model['carrier_wavelength'],
            manu_ref_refrac_index = lg_edm_model['manu_ref_refrac_index'],
            measurement_increments = lg_edm_model['measurement_increments'],
            edm_make_name = lg_edm_model['edm_make_name'],
            edm_model_name = lg_edm_model['edm_model_name'],
            edm_owner = Company.objects.get(
                company_name__exact=lg_edm_model['edm_owner'])
            )
    for edm in lg_edms:
        record_obj, created = medjil_edm_inst.objects.get_or_create(
            edm_number = edm['edm_number'],
            photo = edm['photo'],
            comment = edm['comment'],
            edm_specs = medjil_edm_model.objects.get(
                edm_model_name__exact = edm['edm_model_name'],
                edm_owner__exact = Company.objects.get(
                    company_name__exact=edm['edm_custodian']))
            )
    for cert in lg_edmi_certs:
        record_obj, created = medjil_edmi_certs.objects.get_or_create(
            calibration_date = cert['calibration_date'],
            scale_correction_factor = cert['scale_correction_factor'],
            scf_uncertainty = cert['scf_uncertainty'],
            scf_coverage_factor = cert['scf_coverage_factor'],
            scf_std_dev = cert['scf_std_dev'],
            zero_point_correction = cert['zero_point_correction'],
            zpc_uncertainty = cert['zpc_uncertainty'],
            zpc_coverage_factor = cert['zpc_coverage_factor'],
            zpc_std_dev = cert['zpc_std_dev'],
            standard_deviation = cert['standard_deviation'],
            degrees_of_freedom = cert['degrees_of_freedom'],
            certificate_upload = File(open(cert['certificate_upload'], 'rb'), name = cert['certificate_upload'].split('/')[-1]),
            edm = medjil_edm_inst.objects.get(
                edm_number__exact=cert['edm_number']),
            prism = medjil_prism_inst.objects.get(
                prism_number__exact=cert['prism_number'])
            )
    # Add Landgate Mets gear
    for lg_mets_model in lg_mets_models:
        record_obj, created = medjil_mets_model.objects.get_or_create(
            manu_unc_const = lg_mets_model['manu_unc_const'],
            manu_unc_k = lg_mets_model['manu_unc_k'],
            measurement_increments = lg_mets_model['measurement_increments'],
            inst_type = lg_mets_model['type'],
            mets_make_name = lg_mets_model['mets_make_name'],
            mets_model_name = lg_mets_model['mets_model_name'],
            mets_owner = Company.objects.get(
                company_name__exact=lg_mets_model['mets_owner'])
            )
    for inst in lg_mets_insts:
        record_obj, created = medjil_mets_inst.objects.get_or_create(
            mets_number = inst['mets_number'],
            comment = inst['comment'],
            photo = inst['photo'],
            mets_specs = medjil_mets_model.objects.get(
                inst_type__exact=inst['type'],
                mets_model_name__exact=inst['mets_model_name'],
                mets_owner__exact = Company.objects.get(
                    company_name__exact='Landgate'))
            )
    for cert in lg_mets_certs:
        medjil_mets_certs.objects.get_or_create(
            calibration_date = cert['calibration_date'],
            zero_point_correction = cert['zero_point_correction'],
            zpc_uncertainty = cert['zpc_uncertainty'],
            zpc_coverage_factor = cert['zpc_coverage_factor'],
            zpc_std_dev = cert['zpc_std_dev'],
            degrees_of_freedom = cert['degrees_of_freedom'],
            certificate_upload = File(open(cert['certificate_upload'], 'rb'), name = cert['certificate_upload'].split('/')[-1]),
            instrument = medjil_mets_inst.objects.get(
                mets_specs__inst_type__exact=cert['type'],
                mets_specs__mets_owner__exact = Company.objects.get(
                    company_name__exact='Landgate'),
                mets_number__exact=cert['mets_number'])
            )


def reverse_func(apps, schema_editor):
    DigitalLevel = apps.get_model('instruments', 'DigitalLevel')
    Staff = apps.get_model('instruments', 'Staff')
    
    DigitalLevel.objects.all().delete()
    Staff.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('calibrationsites', '0001_initial'),
        ('instruments', '0002_auto_load_default_instruments'),
        ('staffcalibration', '0001_initial'),
    ]

    operations = [
            migrations.RunPython(add_landgate_instruments, reverse_func),
    ]
